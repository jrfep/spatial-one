{
  "hash": "fa798516f7f2d7a4b9a93571ce444c2f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nsubtitle: \"Exploring the Vegetation of New South Wales\"\ntitle: \"Using rasterio with a categorical map\"\nauthor: \"Jos√© R. Ferrer-Paris\"\ndate: \"2024-05-29\"\ncategories: [Python, rasterio, vegetation, Australia]\nfrom: markdown+emoji\neditor_options: \n  chunk_output_type: console\nengine: jupyter\n---\n\nI want to explore the vegetation of New South Wales in a couple of post using different packages and modules. I will start today with `Python` and my first question is how to work with a *categorical map* and its *value attribute table*.\n\n## Import the modules\n\nFirst I use the import statements to load the modules I will use in this session. I will be using read functions from [GeoPandas](https://geopandas.org/en/stable/docs/user_guide.html) and [Rasterio](https://rasterio.readthedocs.io/en/stable/index.html) and a couple of helper funcitons from [EarthPy](https://earthpy.readthedocs.io/en/latest/get-started.html) as well as the usual suspects [matplotlib](https://matplotlib.org/stable/), numpy and pandas.\n\n::: {#5b13c936 .cell execution_count=1}\n``` {.python .cell-code}\nimport geopandas as gpd\nimport pandas as pd\nimport rasterio\nfrom rasterio import windows\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as colors\nimport earthpy.plot as ep\n```\n:::\n\n\n## The data\n\nI will use the Vegetation Formations and Classes of NSW Version 3.03 (Keith and Simpson 2012; updated in 2017). The spatial data is available at the SEED portal, but I am too lazy to download and unzip the file myself, so I will just read the files on the fly. \n\n:::{.aside}\nVegetation Formations and Classes of NSW (version 3.03 - 200m Raster) - David A. Keith and Christopher C. Simpson. VIS_ID 3848. Updated in 2017 as version 3.1. Available from [SEED data portal](https://datasets.seed.nsw.gov.au/dataset/vegetation-classes-of-nsw-version-3-03-200m-raster-david-a-keith-and-christopher-c-simpc0917)\n:::\n\n### Value attribute table (VAT)\n\nFirst, I want to read the value attribute table of the raster file (the file with the extension `tif.vat.dbf`). I will need to know the url for the zipfile, and then the relative path to the file that I want to read within the zipfile. \n\nWith these lines of code I generate the remote path I need for accessing the data:\n\n::: {#27f768f5 .cell execution_count=2}\n``` {.python .cell-code}\nurl = \"https://datasets.seed.nsw.gov.au/dataset/31986103-db62-4994-9702-054949281f56/resource/34a8cc72-5753-4993-8957-8d8af4fab008/download/ygeonetworkzipsvegetationnswmap3848.zip\" \nvat_file = \"Vegetation_NSWmap3848/Data/GeoTIFF/NSWmap_v3_03_E_3848.tif.vat.dbf\"\nremote_path = 'zip+{}!/{}'.format(url, vat_file)\n```\n:::\n\n\nI can read this file with `geopandas`:\n\n::: {#45cc6c1f .cell execution_count=3}\n``` {.python .cell-code}\nvat = gpd.read_file(remote_path)\n```\n:::\n\n\nAnd Now I can see the attribute table for the raster I want to use.\n\n::: {#f0cbfd6d .cell execution_count=4}\n``` {.python .cell-code}\nvat.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Value</th>\n      <th>Count</th>\n      <th>MapName</th>\n      <th>ClassNumbe</th>\n      <th>ClassName</th>\n      <th>FormationN</th>\n      <th>Formatio_1</th>\n      <th>VIS_ID</th>\n      <th>Classifica</th>\n      <th>ThematicRe</th>\n      <th>SpatialRes</th>\n      <th>MapReliabi</th>\n      <th>Currency</th>\n      <th>Shape_Leng</th>\n      <th>Shape_Area</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>2174.0</td>\n      <td>Albury</td>\n      <td>0</td>\n      <td>Cleared</td>\n      <td>Cleared</td>\n      <td>0.0</td>\n      <td>2907.0</td>\n      <td>moderate</td>\n      <td>very coarse</td>\n      <td>1:5000&gt;scale&gt;=1:25000, patches &gt;=1 ha</td>\n      <td>Low</td>\n      <td>2000-04</td>\n      <td>2.125684e+05</td>\n      <td>8.806694e+07</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>48.0</td>\n      <td>Albury</td>\n      <td>42</td>\n      <td>Western Slopes Grassy Woodlands</td>\n      <td>Grassy woodlands</td>\n      <td>4.0</td>\n      <td>2907.0</td>\n      <td>moderate</td>\n      <td>very coarse</td>\n      <td>1:5000&gt;scale&gt;=1:25000, patches &gt;=1 ha</td>\n      <td>Low</td>\n      <td>2000-04</td>\n      <td>5.519073e+04</td>\n      <td>2.160050e+06</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1.0</td>\n      <td>Albury</td>\n      <td>52</td>\n      <td>Inland Riverine Forests</td>\n      <td>Forested wetlands</td>\n      <td>11.0</td>\n      <td>2907.0</td>\n      <td>moderate</td>\n      <td>very coarse</td>\n      <td>1:5000&gt;scale&gt;=1:25000, patches &gt;=1 ha</td>\n      <td>Low</td>\n      <td>2000-04</td>\n      <td>2.796665e+03</td>\n      <td>1.043730e+05</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>742.0</td>\n      <td>Anabranch-Mildura</td>\n      <td>52</td>\n      <td>Inland Riverine Forests</td>\n      <td>Forested wetlands</td>\n      <td>11.0</td>\n      <td>1873.0</td>\n      <td>very low</td>\n      <td>coarse</td>\n      <td>scale&gt;=1:100000, patches &gt;=20 ha</td>\n      <td>Very low</td>\n      <td>1964-1965</td>\n      <td>5.710281e+05</td>\n      <td>2.922206e+07</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>7817.0</td>\n      <td>Anabranch-Mildura</td>\n      <td>53</td>\n      <td>Inland Floodplain Woodlands</td>\n      <td>Semi-arid woodlands (Grassy subformation)</td>\n      <td>13.0</td>\n      <td>1873.0</td>\n      <td>very low</td>\n      <td>coarse</td>\n      <td>scale&gt;=1:100000, patches &gt;=20 ha</td>\n      <td>Very low</td>\n      <td>1964-1965</td>\n      <td>1.973462e+06</td>\n      <td>3.137011e+08</td>\n      <td>None</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe will mostly use the class and formation names in columns `ClassName` and `FormationN`.\n\n### Raster data\n\nReading the GeoTiff file is very similar, I use the same url as before, but change the relative path to locate the file with `.tif` extension, then we open the remote path using `rasterio.open`:\n\n::: {#6a66ee25 .cell execution_count=5}\n``` {.python .cell-code}\ngtiff_file = \"Vegetation_NSWmap3848/Data/GeoTIFF/NSWmap_v3_03_E_3848.tif\"\ngtiff_path = 'zip+{}!/{}'.format(url, gtiff_file)\ndataset = rasterio.open(gtiff_path)\n```\n:::\n\n\nWe can now explore this object to get its dimensions, bounds and coordinate reference system (CRS):\n\n::: {#2a94c19c .cell execution_count=6}\n``` {.python .cell-code}\nprint(dataset.width, dataset.height)\n{i: dtype for i, dtype in zip(dataset.indexes, dataset.dtypes)}\ndataset.bounds\ndataset.crs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n8661 5104\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nCRS.from_epsg(3308)\n```\n:::\n:::\n\n\nThe CRS is important, for we will need this information to create a window to crop the raster data. This EPSG code is know as the *GDA94 / NSW Lambert*. I explore this projection in <https://epsg.io/3308> and get the coordinates around Sturt National Park at the northwestern corner of New South Wales:\n\n::: {#bbcc3a53 .cell execution_count=7}\n``` {.python .cell-code}\nx0=8800000\ny0=4900000\nx1=x0+60000\ny1=y0+40000\n```\n:::\n\n\nNow I can use these bounds to crop the first (and only) band of the raster layer using the `windows` function in combination with a `read` function.\n\n::: {#34dee14f .cell execution_count=8}\n``` {.python .cell-code}\nW = windows.from_bounds(\n  left=x0, \n  bottom=y0 , \n  right=x1, \n  top=y1, \n  transform=dataset.transform)\n\nband1 = dataset.read(1, window=W)\n```\n:::\n\n\nWe can now close the dataset, we already have the data we need in memory.\n\n::: {#a763ce25 .cell execution_count=9}\n``` {.python .cell-code}\ndataset.close()\n```\n:::\n\n\n## Summarising the data\n\nNow we want to summarise the information over the selected spatial window. \nWe can use the `unique` function from numpy to create a frequency table for the raster values present in this region of interest.\n\n::: {#7386aef5 .cell execution_count=10}\n``` {.python .cell-code}\nunique_values, counts = np.unique(band1, return_counts=True)\nss_vals = pd.DataFrame(index=unique_values, data={'NewCount':counts})\n```\n:::\n\n\nAnd now we can join this with the VAT object created before. Make sure to use the right column for the index of both data frames to get the information aligned properly.\n\n::: {#945c2eb5 .cell execution_count=11}\n``` {.python .cell-code}\njoined = vat.set_index('Value').join(ss_vals, how=\"right\", validate='one_to_one')\n```\n:::\n\n\nWe can now create a summary table of the formations and classes present in our region of interest with the number of cells in each category.\n\n::: {#091b2a34 .cell execution_count=12}\n``` {.python .cell-code}\njoined.groupby(by=['FormationN','ClassName'])[['NewCount']].sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>NewCount</th>\n    </tr>\n    <tr>\n      <th>FormationN</th>\n      <th>ClassName</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">Arid shrublands (Acacia subformation)</th>\n      <th>Sand Plain Mulga Shrublands</th>\n      <td>6858</td>\n    </tr>\n    <tr>\n      <th>Stony Desert Mulga Shrublands</th>\n      <td>870</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Arid shrublands (Chenopod subformation)</th>\n      <th>Aeolian Chenopod Shrublands</th>\n      <td>1432</td>\n    </tr>\n    <tr>\n      <th>Gibber Chenopod Shrublands</th>\n      <td>32782</td>\n    </tr>\n    <tr>\n      <th>Riverine Chenopod Shrublands</th>\n      <td>170</td>\n    </tr>\n    <tr>\n      <th>Freshwater wetlands</th>\n      <th>Inland Floodplain Shrublands</th>\n      <td>1523</td>\n    </tr>\n    <tr>\n      <th>Semi-arid woodlands (Grassy subformation)</th>\n      <th>Wadi Woodlands</th>\n      <td>15787</td>\n    </tr>\n    <tr>\n      <th>Semi-arid woodlands (Shrubby subformation)</th>\n      <th>Desert Woodlands</th>\n      <td>578</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Plotting the data\n\nWe can plot this window of the map with a legend to look at the spatial configuration of these classes in the landscape.\n\nFirst we choose the colors for our classes\n\n::: {#fc98263a .cell execution_count=13}\n``` {.python .cell-code}\nclrs = plt.colormaps[\"tab20\"](np.arange(len(unique_values)))\ncmap=colors.ListedColormap(clrs)\n```\n:::\n\n\nAnd we construct the legend combining the index number and the formation names:\n\n::: {#5a94aecc .cell execution_count=14}\n``` {.python .cell-code}\nclass_names_list = list()\nfor a,b in zip(joined.index,joined.FormationN):\n  class_names_list.append(\"{} {}\".format(a,b))\n```\n:::\n\n\nAnd now we combine a couple of functions from matplotlib and EarthPy to create a plot with a legend:\n\n::: {#69ce8958 .cell execution_count=15}\n``` {.python .cell-code}\nf, ax = plt.subplots(figsize=(5,5))\nim = ax.imshow(band1, cmap = cmap, norm=None)\nax.set(title=\"Formations\")\nep.draw_legend(im, titles = class_names_list)\nax.set_axis_off()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-16-output-1.png){width=904 height=287}\n:::\n:::\n\n\n## Conclusion\n\nHere we use python, `rasterio` and `geopandas` to explore a categorical raster layer using its value attribute table. Thanks to NSW SEED portal for providing the data!\n\nHere the basic recipe:\n\n- Find the dataset url,\n- Load the VAT file\n- Load the raster layer and crop it to a region of interest\n- Read the data and summarise it with numpy and pandas functions\n- Plot the data with matplotlib\n- Done!\n\nWe can now build on this in future posts. Cheers!\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}